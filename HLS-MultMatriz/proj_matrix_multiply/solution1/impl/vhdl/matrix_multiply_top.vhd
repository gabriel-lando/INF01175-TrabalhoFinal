-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_multiply_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrix_multiply_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrix_multiply_top,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k70tfbv676-3,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.123000,HLS_SYN_LAT=120,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=1507,HLS_SYN_LUT=1339,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal r_1_fu_217_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_1_reg_394 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_4_fu_239_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_reg_399 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_1_fu_251_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_1_reg_407 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_18_cast_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_cast_reg_412 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_2_fu_277_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_2_reg_425 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_10_fu_299_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_reg_430 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_2_fu_311_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_2_reg_438 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_21_cast_fu_326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_cast_reg_443 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_3_fu_337_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_3_reg_456 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_14_fu_359_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_reg_461 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_3_fu_371_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_3_reg_469 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_22_cast_fu_386_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_cast_reg_474 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_i_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal a_i_ce0 : STD_LOGIC;
    signal a_i_we0 : STD_LOGIC;
    signal a_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_i_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_i_ce0 : STD_LOGIC;
    signal b_i_we0 : STD_LOGIC;
    signal b_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal C_assign_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal C_assign_ce0 : STD_LOGIC;
    signal C_assign_we0 : STD_LOGIC;
    signal C_assign_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_multiply_alt2_fu_204_ap_start : STD_LOGIC;
    signal grp_matrix_multiply_alt2_fu_204_ap_done : STD_LOGIC;
    signal grp_matrix_multiply_alt2_fu_204_ap_idle : STD_LOGIC;
    signal grp_matrix_multiply_alt2_fu_204_ap_ready : STD_LOGIC;
    signal grp_matrix_multiply_alt2_fu_204_A_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrix_multiply_alt2_fu_204_A_ce0 : STD_LOGIC;
    signal grp_matrix_multiply_alt2_fu_204_B_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrix_multiply_alt2_fu_204_B_ce0 : STD_LOGIC;
    signal grp_matrix_multiply_alt2_fu_204_C_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrix_multiply_alt2_fu_204_C_ce0 : STD_LOGIC;
    signal grp_matrix_multiply_alt2_fu_204_C_we0 : STD_LOGIC;
    signal grp_matrix_multiply_alt2_fu_204_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_reg_138 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_reg_149 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal r1_reg_160 : STD_LOGIC_VECTOR (1 downto 0);
    signal c2_reg_171 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal r3_reg_182 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal c4_reg_193 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_matrix_multiply_alt2_fu_204_ap_start_reg : STD_LOGIC := '0';
    signal tmp_1_fu_227_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_235_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_cast_fu_223_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_cast_fu_257_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_261_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_287_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_fu_295_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_cast_fu_283_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_cast_fu_317_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_15_fu_321_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_fu_347_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_cast_fu_355_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_343_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_cast_fu_377_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_381_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);

    component matrix_multiply_alt2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_we0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_multiply_teOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    a_i_U : component matrix_multiply_teOg
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => a_i_address0,
        ce0 => a_i_ce0,
        we0 => a_i_we0,
        d0 => A_q0,
        q0 => a_i_q0);

    b_i_U : component matrix_multiply_teOg
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b_i_address0,
        ce0 => b_i_ce0,
        we0 => b_i_we0,
        d0 => B_q0,
        q0 => b_i_q0);

    C_assign_U : component matrix_multiply_teOg
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => C_assign_address0,
        ce0 => C_assign_ce0,
        we0 => C_assign_we0,
        d0 => grp_matrix_multiply_alt2_fu_204_C_d0,
        q0 => C_assign_q0);

    grp_matrix_multiply_alt2_fu_204 : component matrix_multiply_alt2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrix_multiply_alt2_fu_204_ap_start,
        ap_done => grp_matrix_multiply_alt2_fu_204_ap_done,
        ap_idle => grp_matrix_multiply_alt2_fu_204_ap_idle,
        ap_ready => grp_matrix_multiply_alt2_fu_204_ap_ready,
        A_address0 => grp_matrix_multiply_alt2_fu_204_A_address0,
        A_ce0 => grp_matrix_multiply_alt2_fu_204_A_ce0,
        A_q0 => a_i_q0,
        B_address0 => grp_matrix_multiply_alt2_fu_204_B_address0,
        B_ce0 => grp_matrix_multiply_alt2_fu_204_B_ce0,
        B_q0 => b_i_q0,
        C_address0 => grp_matrix_multiply_alt2_fu_204_C_address0,
        C_ce0 => grp_matrix_multiply_alt2_fu_204_C_ce0,
        C_we0 => grp_matrix_multiply_alt2_fu_204_C_we0,
        C_d0 => grp_matrix_multiply_alt2_fu_204_C_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_matrix_multiply_alt2_fu_204_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrix_multiply_alt2_fu_204_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_2_fu_271_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_matrix_multiply_alt2_fu_204_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix_multiply_alt2_fu_204_ap_ready = ap_const_logic_1)) then 
                    grp_matrix_multiply_alt2_fu_204_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c2_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                c2_reg_171 <= c_2_reg_438;
            elsif (((tmp_2_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                c2_reg_171 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c4_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                c4_reg_193 <= c_3_reg_469;
            elsif (((tmp_8_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                c4_reg_193 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    c_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                c_reg_149 <= c_1_reg_407;
            elsif (((tmp_fu_211_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_reg_149 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r1_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_211_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r1_reg_160 <= ap_const_lv2_0;
            elsif (((tmp_9_fu_305_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                r1_reg_160 <= r_2_reg_425;
            end if; 
        end if;
    end process;

    r3_reg_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_7_fu_365_p2 = ap_const_lv1_1))) then 
                r3_reg_182 <= r_3_reg_456;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_matrix_multiply_alt2_fu_204_ap_done = ap_const_logic_1))) then 
                r3_reg_182 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_reg_138 <= r_1_reg_394;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_reg_138 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_1_reg_407 <= c_1_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                c_2_reg_438 <= c_2_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                c_3_reg_469 <= c_3_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_1_reg_394 <= r_1_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                r_2_reg_425 <= r_2_fu_277_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                r_3_reg_456 <= r_3_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_10_reg_430 <= tmp_10_fu_299_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_331_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                tmp_14_reg_461 <= tmp_14_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_245_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_18_cast_reg_412 <= tmp_18_cast_fu_266_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_fu_305_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_21_cast_reg_443 <= tmp_21_cast_fu_326_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_365_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                tmp_22_cast_reg_474 <= tmp_22_cast_fu_386_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_211_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_4_reg_399 <= tmp_4_fu_239_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_211_p2, ap_CS_fsm_state3, tmp_3_fu_245_p2, ap_CS_fsm_state5, tmp_2_fu_271_p2, ap_CS_fsm_state6, tmp_9_fu_305_p2, ap_CS_fsm_state9, tmp_8_fu_331_p2, ap_CS_fsm_state10, tmp_7_fu_365_p2, grp_matrix_multiply_alt2_fu_204_ap_done, ap_CS_fsm_state8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_211_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_3_fu_245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((tmp_2_fu_271_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state6 => 
                if (((tmp_9_fu_305_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_matrix_multiply_alt2_fu_204_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_8_fu_331_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_7_fu_365_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    A_address0 <= tmp_18_cast_fu_266_p1(4 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= tmp_21_cast_fu_326_p1(4 - 1 downto 0);

    B_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_address0 <= tmp_22_cast_reg_474(4 - 1 downto 0);

    C_assign_address0_assign_proc : process(ap_CS_fsm_state10, tmp_22_cast_fu_386_p1, grp_matrix_multiply_alt2_fu_204_C_address0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C_assign_address0 <= tmp_22_cast_fu_386_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_assign_address0 <= grp_matrix_multiply_alt2_fu_204_C_address0;
        else 
            C_assign_address0 <= "XXXX";
        end if; 
    end process;


    C_assign_ce0_assign_proc : process(ap_CS_fsm_state10, grp_matrix_multiply_alt2_fu_204_C_ce0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            C_assign_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_assign_ce0 <= grp_matrix_multiply_alt2_fu_204_C_ce0;
        else 
            C_assign_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_assign_we0_assign_proc : process(grp_matrix_multiply_alt2_fu_204_C_we0, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            C_assign_we0 <= grp_matrix_multiply_alt2_fu_204_C_we0;
        else 
            C_assign_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= C_assign_q0;

    C_we0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;


    a_i_address0_assign_proc : process(tmp_18_cast_reg_412, grp_matrix_multiply_alt2_fu_204_A_address0, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_i_address0 <= tmp_18_cast_reg_412(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            a_i_address0 <= grp_matrix_multiply_alt2_fu_204_A_address0;
        else 
            a_i_address0 <= "XXXX";
        end if; 
    end process;


    a_i_ce0_assign_proc : process(grp_matrix_multiply_alt2_fu_204_A_ce0, ap_CS_fsm_state4, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_i_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            a_i_ce0 <= grp_matrix_multiply_alt2_fu_204_A_ce0;
        else 
            a_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_i_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            a_i_we0 <= ap_const_logic_1;
        else 
            a_i_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state9, tmp_8_fu_331_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_8_fu_331_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, tmp_8_fu_331_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_8_fu_331_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_i_address0_assign_proc : process(tmp_21_cast_reg_443, grp_matrix_multiply_alt2_fu_204_B_address0, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_i_address0 <= tmp_21_cast_reg_443(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            b_i_address0 <= grp_matrix_multiply_alt2_fu_204_B_address0;
        else 
            b_i_address0 <= "XXXX";
        end if; 
    end process;


    b_i_ce0_assign_proc : process(grp_matrix_multiply_alt2_fu_204_B_ce0, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_i_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            b_i_ce0 <= grp_matrix_multiply_alt2_fu_204_B_ce0;
        else 
            b_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_i_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            b_i_we0 <= ap_const_logic_1;
        else 
            b_i_we0 <= ap_const_logic_0;
        end if; 
    end process;

    c_1_fu_251_p2 <= std_logic_vector(unsigned(c_reg_149) + unsigned(ap_const_lv2_1));
    c_2_fu_311_p2 <= std_logic_vector(unsigned(c2_reg_171) + unsigned(ap_const_lv2_1));
    c_3_fu_371_p2 <= std_logic_vector(unsigned(c4_reg_193) + unsigned(ap_const_lv2_1));
    grp_matrix_multiply_alt2_fu_204_ap_start <= grp_matrix_multiply_alt2_fu_204_ap_start_reg;
    p_shl1_cast_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_287_p3),5));
    p_shl2_cast_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_347_p3),5));
    p_shl_cast_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_227_p3),5));
    r_1_fu_217_p2 <= std_logic_vector(unsigned(r_reg_138) + unsigned(ap_const_lv2_1));
    r_2_fu_277_p2 <= std_logic_vector(unsigned(r1_reg_160) + unsigned(ap_const_lv2_1));
    r_3_fu_337_p2 <= std_logic_vector(unsigned(r3_reg_182) + unsigned(ap_const_lv2_1));
    tmp_10_cast_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c4_reg_193),5));
    tmp_10_fu_299_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_295_p1) - unsigned(tmp_4_cast_fu_283_p1));
    tmp_11_fu_261_p2 <= std_logic_vector(unsigned(tmp_4_reg_399) + unsigned(tmp_6_cast_fu_257_p1));
    tmp_13_fu_347_p3 <= (r3_reg_182 & ap_const_lv2_0);
    tmp_14_fu_359_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_355_p1) - unsigned(tmp_cast_fu_343_p1));
    tmp_15_fu_321_p2 <= std_logic_vector(unsigned(tmp_10_reg_430) + unsigned(tmp_5_cast_fu_317_p1));
    tmp_16_fu_381_p2 <= std_logic_vector(unsigned(tmp_14_reg_461) + unsigned(tmp_10_cast_fu_377_p1));
        tmp_18_cast_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_fu_261_p2),64));

    tmp_1_cast_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_reg_138),5));
    tmp_1_fu_227_p3 <= (r_reg_138 & ap_const_lv2_0);
        tmp_21_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_fu_321_p2),64));

        tmp_22_cast_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_fu_381_p2),64));

    tmp_2_fu_271_p2 <= "1" when (r1_reg_160 = ap_const_lv2_3) else "0";
    tmp_3_fu_245_p2 <= "1" when (c_reg_149 = ap_const_lv2_3) else "0";
    tmp_4_cast_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r1_reg_160),5));
    tmp_4_fu_239_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_235_p1) - unsigned(tmp_1_cast_fu_223_p1));
    tmp_5_cast_fu_317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c2_reg_171),5));
    tmp_6_cast_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_149),5));
    tmp_6_fu_287_p3 <= (r1_reg_160 & ap_const_lv2_0);
    tmp_7_fu_365_p2 <= "1" when (c4_reg_193 = ap_const_lv2_3) else "0";
    tmp_8_fu_331_p2 <= "1" when (r3_reg_182 = ap_const_lv2_3) else "0";
    tmp_9_fu_305_p2 <= "1" when (c2_reg_171 = ap_const_lv2_3) else "0";
    tmp_cast_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r3_reg_182),5));
    tmp_fu_211_p2 <= "1" when (r_reg_138 = ap_const_lv2_3) else "0";
end behav;
