// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_multiply_top,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k70tfbv676-3,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.123000,HLS_SYN_LAT=120,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=1507,HLS_SYN_LUT=1339,HLS_VERSION=2018_3}" *)

module matrix_multiply_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [3:0] B_address0;
output   B_ce0;
input  [31:0] B_q0;
output  [3:0] C_address0;
output   C_ce0;
output   C_we0;
output  [31:0] C_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg C_ce0;
reg C_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] r_1_fu_217_p2;
reg   [1:0] r_1_reg_394;
wire    ap_CS_fsm_state2;
wire   [4:0] tmp_4_fu_239_p2;
reg   [4:0] tmp_4_reg_399;
wire   [0:0] tmp_fu_211_p2;
wire   [1:0] c_1_fu_251_p2;
reg   [1:0] c_1_reg_407;
wire    ap_CS_fsm_state3;
wire  signed [63:0] tmp_18_cast_fu_266_p1;
reg  signed [63:0] tmp_18_cast_reg_412;
wire   [0:0] tmp_3_fu_245_p2;
wire   [1:0] r_2_fu_277_p2;
reg   [1:0] r_2_reg_425;
wire    ap_CS_fsm_state5;
wire   [4:0] tmp_10_fu_299_p2;
reg   [4:0] tmp_10_reg_430;
wire   [0:0] tmp_2_fu_271_p2;
wire   [1:0] c_2_fu_311_p2;
reg   [1:0] c_2_reg_438;
wire    ap_CS_fsm_state6;
wire  signed [63:0] tmp_21_cast_fu_326_p1;
reg  signed [63:0] tmp_21_cast_reg_443;
wire   [0:0] tmp_9_fu_305_p2;
wire   [1:0] r_3_fu_337_p2;
reg   [1:0] r_3_reg_456;
wire    ap_CS_fsm_state9;
wire   [4:0] tmp_14_fu_359_p2;
reg   [4:0] tmp_14_reg_461;
wire   [0:0] tmp_8_fu_331_p2;
wire   [1:0] c_3_fu_371_p2;
reg   [1:0] c_3_reg_469;
wire    ap_CS_fsm_state10;
wire  signed [63:0] tmp_22_cast_fu_386_p1;
reg  signed [63:0] tmp_22_cast_reg_474;
wire   [0:0] tmp_7_fu_365_p2;
reg   [3:0] a_i_address0;
reg    a_i_ce0;
reg    a_i_we0;
wire   [31:0] a_i_q0;
reg   [3:0] b_i_address0;
reg    b_i_ce0;
reg    b_i_we0;
wire   [31:0] b_i_q0;
reg   [3:0] C_assign_address0;
reg    C_assign_ce0;
reg    C_assign_we0;
wire   [31:0] C_assign_q0;
wire    grp_matrix_multiply_alt2_fu_204_ap_start;
wire    grp_matrix_multiply_alt2_fu_204_ap_done;
wire    grp_matrix_multiply_alt2_fu_204_ap_idle;
wire    grp_matrix_multiply_alt2_fu_204_ap_ready;
wire   [3:0] grp_matrix_multiply_alt2_fu_204_A_address0;
wire    grp_matrix_multiply_alt2_fu_204_A_ce0;
wire   [3:0] grp_matrix_multiply_alt2_fu_204_B_address0;
wire    grp_matrix_multiply_alt2_fu_204_B_ce0;
wire   [3:0] grp_matrix_multiply_alt2_fu_204_C_address0;
wire    grp_matrix_multiply_alt2_fu_204_C_ce0;
wire    grp_matrix_multiply_alt2_fu_204_C_we0;
wire   [31:0] grp_matrix_multiply_alt2_fu_204_C_d0;
reg   [1:0] r_reg_138;
reg   [1:0] c_reg_149;
wire    ap_CS_fsm_state4;
reg   [1:0] r1_reg_160;
reg   [1:0] c2_reg_171;
wire    ap_CS_fsm_state7;
reg   [1:0] r3_reg_182;
wire    ap_CS_fsm_state8;
reg   [1:0] c4_reg_193;
wire    ap_CS_fsm_state11;
reg    grp_matrix_multiply_alt2_fu_204_ap_start_reg;
wire   [3:0] tmp_1_fu_227_p3;
wire   [4:0] p_shl_cast_fu_235_p1;
wire   [4:0] tmp_1_cast_fu_223_p1;
wire   [4:0] tmp_6_cast_fu_257_p1;
wire   [4:0] tmp_11_fu_261_p2;
wire   [3:0] tmp_6_fu_287_p3;
wire   [4:0] p_shl1_cast_fu_295_p1;
wire   [4:0] tmp_4_cast_fu_283_p1;
wire   [4:0] tmp_5_cast_fu_317_p1;
wire   [4:0] tmp_15_fu_321_p2;
wire   [3:0] tmp_13_fu_347_p3;
wire   [4:0] p_shl2_cast_fu_355_p1;
wire   [4:0] tmp_cast_fu_343_p1;
wire   [4:0] tmp_10_cast_fu_377_p1;
wire   [4:0] tmp_16_fu_381_p2;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 grp_matrix_multiply_alt2_fu_204_ap_start_reg = 1'b0;
end

matrix_multiply_teOg #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
a_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(a_i_address0),
    .ce0(a_i_ce0),
    .we0(a_i_we0),
    .d0(A_q0),
    .q0(a_i_q0)
);

matrix_multiply_teOg #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
b_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b_i_address0),
    .ce0(b_i_ce0),
    .we0(b_i_we0),
    .d0(B_q0),
    .q0(b_i_q0)
);

matrix_multiply_teOg #(
    .DataWidth( 32 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
C_assign_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(C_assign_address0),
    .ce0(C_assign_ce0),
    .we0(C_assign_we0),
    .d0(grp_matrix_multiply_alt2_fu_204_C_d0),
    .q0(C_assign_q0)
);

matrix_multiply_alt2 grp_matrix_multiply_alt2_fu_204(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matrix_multiply_alt2_fu_204_ap_start),
    .ap_done(grp_matrix_multiply_alt2_fu_204_ap_done),
    .ap_idle(grp_matrix_multiply_alt2_fu_204_ap_idle),
    .ap_ready(grp_matrix_multiply_alt2_fu_204_ap_ready),
    .A_address0(grp_matrix_multiply_alt2_fu_204_A_address0),
    .A_ce0(grp_matrix_multiply_alt2_fu_204_A_ce0),
    .A_q0(a_i_q0),
    .B_address0(grp_matrix_multiply_alt2_fu_204_B_address0),
    .B_ce0(grp_matrix_multiply_alt2_fu_204_B_ce0),
    .B_q0(b_i_q0),
    .C_address0(grp_matrix_multiply_alt2_fu_204_C_address0),
    .C_ce0(grp_matrix_multiply_alt2_fu_204_C_ce0),
    .C_we0(grp_matrix_multiply_alt2_fu_204_C_we0),
    .C_d0(grp_matrix_multiply_alt2_fu_204_C_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matrix_multiply_alt2_fu_204_ap_start_reg <= 1'b0;
    end else begin
        if (((tmp_2_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            grp_matrix_multiply_alt2_fu_204_ap_start_reg <= 1'b1;
        end else if ((grp_matrix_multiply_alt2_fu_204_ap_ready == 1'b1)) begin
            grp_matrix_multiply_alt2_fu_204_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c2_reg_171 <= c_2_reg_438;
    end else if (((tmp_2_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        c2_reg_171 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        c4_reg_193 <= c_3_reg_469;
    end else if (((tmp_8_fu_331_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        c4_reg_193 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_149 <= c_1_reg_407;
    end else if (((tmp_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_reg_149 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_211_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        r1_reg_160 <= 2'd0;
    end else if (((tmp_9_fu_305_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        r1_reg_160 <= r_2_reg_425;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_7_fu_365_p2 == 1'd1))) begin
        r3_reg_182 <= r_3_reg_456;
    end else if (((1'b1 == ap_CS_fsm_state8) & (grp_matrix_multiply_alt2_fu_204_ap_done == 1'b1))) begin
        r3_reg_182 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_reg_138 <= r_1_reg_394;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_reg_138 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_1_reg_407 <= c_1_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c_2_reg_438 <= c_2_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        c_3_reg_469 <= c_3_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_1_reg_394 <= r_1_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        r_2_reg_425 <= r_2_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        r_3_reg_456 <= r_3_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_10_reg_430 <= tmp_10_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_331_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_14_reg_461 <= tmp_14_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_fu_245_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_18_cast_reg_412 <= tmp_18_cast_fu_266_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_fu_305_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_21_cast_reg_443 <= tmp_21_cast_fu_326_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_fu_365_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        tmp_22_cast_reg_474 <= tmp_22_cast_fu_386_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_211_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_4_reg_399 <= tmp_4_fu_239_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_assign_address0 = tmp_22_cast_fu_386_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_assign_address0 = grp_matrix_multiply_alt2_fu_204_C_address0;
    end else begin
        C_assign_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        C_assign_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        C_assign_ce0 = grp_matrix_multiply_alt2_fu_204_C_ce0;
    end else begin
        C_assign_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        C_assign_we0 = grp_matrix_multiply_alt2_fu_204_C_we0;
    end else begin
        C_assign_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_i_address0 = tmp_18_cast_reg_412;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        a_i_address0 = grp_matrix_multiply_alt2_fu_204_A_address0;
    end else begin
        a_i_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_i_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        a_i_ce0 = grp_matrix_multiply_alt2_fu_204_A_ce0;
    end else begin
        a_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_i_we0 = 1'b1;
    end else begin
        a_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_8_fu_331_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (tmp_8_fu_331_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        b_i_address0 = tmp_21_cast_reg_443;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        b_i_address0 = grp_matrix_multiply_alt2_fu_204_B_address0;
    end else begin
        b_i_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        b_i_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        b_i_ce0 = grp_matrix_multiply_alt2_fu_204_B_ce0;
    end else begin
        b_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        b_i_we0 = 1'b1;
    end else begin
        b_i_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_211_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_3_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_2_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((tmp_9_fu_305_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_matrix_multiply_alt2_fu_204_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_8_fu_331_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (tmp_7_fu_365_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_18_cast_fu_266_p1;

assign B_address0 = tmp_21_cast_fu_326_p1;

assign C_address0 = tmp_22_cast_reg_474;

assign C_d0 = C_assign_q0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_1_fu_251_p2 = (c_reg_149 + 2'd1);

assign c_2_fu_311_p2 = (c2_reg_171 + 2'd1);

assign c_3_fu_371_p2 = (c4_reg_193 + 2'd1);

assign grp_matrix_multiply_alt2_fu_204_ap_start = grp_matrix_multiply_alt2_fu_204_ap_start_reg;

assign p_shl1_cast_fu_295_p1 = tmp_6_fu_287_p3;

assign p_shl2_cast_fu_355_p1 = tmp_13_fu_347_p3;

assign p_shl_cast_fu_235_p1 = tmp_1_fu_227_p3;

assign r_1_fu_217_p2 = (r_reg_138 + 2'd1);

assign r_2_fu_277_p2 = (r1_reg_160 + 2'd1);

assign r_3_fu_337_p2 = (r3_reg_182 + 2'd1);

assign tmp_10_cast_fu_377_p1 = c4_reg_193;

assign tmp_10_fu_299_p2 = (p_shl1_cast_fu_295_p1 - tmp_4_cast_fu_283_p1);

assign tmp_11_fu_261_p2 = (tmp_4_reg_399 + tmp_6_cast_fu_257_p1);

assign tmp_13_fu_347_p3 = {{r3_reg_182}, {2'd0}};

assign tmp_14_fu_359_p2 = (p_shl2_cast_fu_355_p1 - tmp_cast_fu_343_p1);

assign tmp_15_fu_321_p2 = (tmp_10_reg_430 + tmp_5_cast_fu_317_p1);

assign tmp_16_fu_381_p2 = (tmp_14_reg_461 + tmp_10_cast_fu_377_p1);

assign tmp_18_cast_fu_266_p1 = $signed(tmp_11_fu_261_p2);

assign tmp_1_cast_fu_223_p1 = r_reg_138;

assign tmp_1_fu_227_p3 = {{r_reg_138}, {2'd0}};

assign tmp_21_cast_fu_326_p1 = $signed(tmp_15_fu_321_p2);

assign tmp_22_cast_fu_386_p1 = $signed(tmp_16_fu_381_p2);

assign tmp_2_fu_271_p2 = ((r1_reg_160 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_3_fu_245_p2 = ((c_reg_149 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_4_cast_fu_283_p1 = r1_reg_160;

assign tmp_4_fu_239_p2 = (p_shl_cast_fu_235_p1 - tmp_1_cast_fu_223_p1);

assign tmp_5_cast_fu_317_p1 = c2_reg_171;

assign tmp_6_cast_fu_257_p1 = c_reg_149;

assign tmp_6_fu_287_p3 = {{r1_reg_160}, {2'd0}};

assign tmp_7_fu_365_p2 = ((c4_reg_193 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_8_fu_331_p2 = ((r3_reg_182 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_9_fu_305_p2 = ((c2_reg_171 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_cast_fu_343_p1 = r3_reg_182;

assign tmp_fu_211_p2 = ((r_reg_138 == 2'd3) ? 1'b1 : 1'b0);

endmodule //matrix_multiply_top
