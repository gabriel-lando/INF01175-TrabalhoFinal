-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_multiply_alt2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrix_multiply_alt2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten1_reg_116 : STD_LOGIC_VECTOR (4 downto 0);
    signal Col_assign_2_reg_127 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_138 : STD_LOGIC_VECTOR (3 downto 0);
    signal Row_assign_reg_149 : STD_LOGIC_VECTOR (1 downto 0);
    signal Col_assign_reg_160 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_flatten1_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_403 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten1_reg_403_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_403_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_403_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_403_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_403_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_403_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next1_fu_187_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_mid2_fu_225_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_412 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_412_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_412_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_412_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_412_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_412_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_412_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_412_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_412_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_412_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_412_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_412_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_412_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_412_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_412_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_412_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_13_fu_245_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_13_reg_416 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_13_reg_416_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_13_reg_416_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_13_reg_416_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_13_reg_416_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_13_reg_416_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_13_reg_416_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_13_reg_416_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_13_reg_416_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_13_reg_416_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_13_reg_416_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_13_reg_416_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_13_reg_416_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_13_reg_416_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_13_reg_416_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_13_reg_416_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_mid2_v_fu_253_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_i_i_mid2_v_reg_420 : STD_LOGIC_VECTOR (1 downto 0);
    signal Col_assign_mid2_fu_291_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal Col_assign_mid2_reg_427 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_mid2_fu_299_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_11_mid2_reg_432 : STD_LOGIC_VECTOR (1 downto 0);
    signal c_fu_307_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_next_fu_319_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_22_fu_392_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_reg_459 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_reg_459_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_reg_459_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_reg_459_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_reg_459_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_reg_459_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal cast_in_a_reg_464 : STD_LOGIC_VECTOR (31 downto 0);
    signal cast_in_b_reg_469 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult_reg_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult_reg_474_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal C_addr_reg_480 : STD_LOGIC_VECTOR (3 downto 0);
    signal C_addr_reg_480_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal C_addr_reg_480_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal C_addr_reg_480_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal C_addr_reg_480_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal C_addr_reg_480_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal C_addr_reg_480_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal C_addr_reg_480_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal C_addr_reg_480_pp0_iter15_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_mult_addr_reg_485 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_mult_addr_reg_485_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_mult_addr_reg_485_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_mult_addr_reg_485_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_mult_addr_reg_485_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_mult_addr_reg_485_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_mult_addr_reg_485_pp0_iter13_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_mult_addr_reg_485_pp0_iter14_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_mult_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal grp_fu_171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal sum_mult_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_mult_ce0 : STD_LOGIC;
    signal sum_mult_we0 : STD_LOGIC;
    signal sum_mult_ce1 : STD_LOGIC;
    signal sum_mult_we1 : STD_LOGIC;
    signal ap_phi_mux_Col_assign_2_phi_fu_131_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_Row_assign_phi_fu_153_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_28_cast_fu_373_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_cast_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_cast_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_flatten_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_193_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_mid1_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid1_12_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Row_assign_mid_fu_205_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_mid_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_279_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_op_fu_313_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_330_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_fu_337_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i_i_mid2_cast_fu_327_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_350_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_357_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_mid2_cast_fu_347_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_fu_361_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_20_fu_367_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_i_i4_cast_fu_378_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_fu_341_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_21_fu_381_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component matrix_multiply_tcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_multiply_tdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_multiply_abkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sum_mult_U : component matrix_multiply_abkb
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sum_mult_address0,
        ce0 => sum_mult_ce0,
        we0 => sum_mult_we0,
        d0 => mult_reg_474,
        q0 => sum_mult_q0,
        address1 => sum_mult_addr_reg_485_pp0_iter14_reg,
        ce1 => sum_mult_ce1,
        we1 => sum_mult_we1,
        d1 => grp_fu_171_p2);

    matrix_multiply_tcud_U1 : component matrix_multiply_tcud
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_mult_q0,
        din1 => mult_reg_474_pp0_iter7_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_171_p2);

    matrix_multiply_tdEe_U2 : component matrix_multiply_tdEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cast_in_a_reg_464,
        din1 => cast_in_b_reg_469,
        ce => ap_const_logic_1,
        dout => grp_fu_177_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    Col_assign_2_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                Col_assign_2_reg_127 <= tmp_i_i_mid2_v_reg_420;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                Col_assign_2_reg_127 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    Col_assign_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_181_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                Col_assign_reg_160 <= c_fu_307_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                Col_assign_reg_160 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    Row_assign_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                Row_assign_reg_149 <= tmp_11_mid2_reg_432;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                Row_assign_reg_149 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_181_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten1_reg_116 <= indvar_flatten_next1_fu_187_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten1_reg_116 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_181_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_138 <= indvar_flatten_next_fu_319_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_138 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten1_reg_403_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                C_addr_reg_480 <= tmp_30_cast_fu_398_p1(4 - 1 downto 0);
                sum_mult_addr_reg_485 <= tmp_30_cast_fu_398_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                C_addr_reg_480_pp0_iter10_reg <= C_addr_reg_480_pp0_iter9_reg;
                C_addr_reg_480_pp0_iter11_reg <= C_addr_reg_480_pp0_iter10_reg;
                C_addr_reg_480_pp0_iter12_reg <= C_addr_reg_480_pp0_iter11_reg;
                C_addr_reg_480_pp0_iter13_reg <= C_addr_reg_480_pp0_iter12_reg;
                C_addr_reg_480_pp0_iter14_reg <= C_addr_reg_480_pp0_iter13_reg;
                C_addr_reg_480_pp0_iter15_reg <= C_addr_reg_480_pp0_iter14_reg;
                C_addr_reg_480_pp0_iter8_reg <= C_addr_reg_480;
                C_addr_reg_480_pp0_iter9_reg <= C_addr_reg_480_pp0_iter8_reg;
                exitcond_flatten1_reg_403_pp0_iter2_reg <= exitcond_flatten1_reg_403_pp0_iter1_reg;
                exitcond_flatten1_reg_403_pp0_iter3_reg <= exitcond_flatten1_reg_403_pp0_iter2_reg;
                exitcond_flatten1_reg_403_pp0_iter4_reg <= exitcond_flatten1_reg_403_pp0_iter3_reg;
                exitcond_flatten1_reg_403_pp0_iter5_reg <= exitcond_flatten1_reg_403_pp0_iter4_reg;
                exitcond_flatten1_reg_403_pp0_iter6_reg <= exitcond_flatten1_reg_403_pp0_iter5_reg;
                mult_reg_474_pp0_iter7_reg <= mult_reg_474;
                sum_mult_addr_reg_485_pp0_iter10_reg <= sum_mult_addr_reg_485_pp0_iter9_reg;
                sum_mult_addr_reg_485_pp0_iter11_reg <= sum_mult_addr_reg_485_pp0_iter10_reg;
                sum_mult_addr_reg_485_pp0_iter12_reg <= sum_mult_addr_reg_485_pp0_iter11_reg;
                sum_mult_addr_reg_485_pp0_iter13_reg <= sum_mult_addr_reg_485_pp0_iter12_reg;
                sum_mult_addr_reg_485_pp0_iter14_reg <= sum_mult_addr_reg_485_pp0_iter13_reg;
                sum_mult_addr_reg_485_pp0_iter8_reg <= sum_mult_addr_reg_485;
                sum_mult_addr_reg_485_pp0_iter9_reg <= sum_mult_addr_reg_485_pp0_iter8_reg;
                tmp_22_reg_459_pp0_iter2_reg <= tmp_22_reg_459;
                tmp_22_reg_459_pp0_iter3_reg <= tmp_22_reg_459_pp0_iter2_reg;
                tmp_22_reg_459_pp0_iter4_reg <= tmp_22_reg_459_pp0_iter3_reg;
                tmp_22_reg_459_pp0_iter5_reg <= tmp_22_reg_459_pp0_iter4_reg;
                tmp_22_reg_459_pp0_iter6_reg <= tmp_22_reg_459_pp0_iter5_reg;
                tmp_mid2_13_reg_416_pp0_iter10_reg <= tmp_mid2_13_reg_416_pp0_iter9_reg;
                tmp_mid2_13_reg_416_pp0_iter11_reg <= tmp_mid2_13_reg_416_pp0_iter10_reg;
                tmp_mid2_13_reg_416_pp0_iter12_reg <= tmp_mid2_13_reg_416_pp0_iter11_reg;
                tmp_mid2_13_reg_416_pp0_iter13_reg <= tmp_mid2_13_reg_416_pp0_iter12_reg;
                tmp_mid2_13_reg_416_pp0_iter14_reg <= tmp_mid2_13_reg_416_pp0_iter13_reg;
                tmp_mid2_13_reg_416_pp0_iter15_reg <= tmp_mid2_13_reg_416_pp0_iter14_reg;
                tmp_mid2_13_reg_416_pp0_iter2_reg <= tmp_mid2_13_reg_416_pp0_iter1_reg;
                tmp_mid2_13_reg_416_pp0_iter3_reg <= tmp_mid2_13_reg_416_pp0_iter2_reg;
                tmp_mid2_13_reg_416_pp0_iter4_reg <= tmp_mid2_13_reg_416_pp0_iter3_reg;
                tmp_mid2_13_reg_416_pp0_iter5_reg <= tmp_mid2_13_reg_416_pp0_iter4_reg;
                tmp_mid2_13_reg_416_pp0_iter6_reg <= tmp_mid2_13_reg_416_pp0_iter5_reg;
                tmp_mid2_13_reg_416_pp0_iter7_reg <= tmp_mid2_13_reg_416_pp0_iter6_reg;
                tmp_mid2_13_reg_416_pp0_iter8_reg <= tmp_mid2_13_reg_416_pp0_iter7_reg;
                tmp_mid2_13_reg_416_pp0_iter9_reg <= tmp_mid2_13_reg_416_pp0_iter8_reg;
                tmp_mid2_reg_412_pp0_iter10_reg <= tmp_mid2_reg_412_pp0_iter9_reg;
                tmp_mid2_reg_412_pp0_iter11_reg <= tmp_mid2_reg_412_pp0_iter10_reg;
                tmp_mid2_reg_412_pp0_iter12_reg <= tmp_mid2_reg_412_pp0_iter11_reg;
                tmp_mid2_reg_412_pp0_iter13_reg <= tmp_mid2_reg_412_pp0_iter12_reg;
                tmp_mid2_reg_412_pp0_iter14_reg <= tmp_mid2_reg_412_pp0_iter13_reg;
                tmp_mid2_reg_412_pp0_iter15_reg <= tmp_mid2_reg_412_pp0_iter14_reg;
                tmp_mid2_reg_412_pp0_iter2_reg <= tmp_mid2_reg_412_pp0_iter1_reg;
                tmp_mid2_reg_412_pp0_iter3_reg <= tmp_mid2_reg_412_pp0_iter2_reg;
                tmp_mid2_reg_412_pp0_iter4_reg <= tmp_mid2_reg_412_pp0_iter3_reg;
                tmp_mid2_reg_412_pp0_iter5_reg <= tmp_mid2_reg_412_pp0_iter4_reg;
                tmp_mid2_reg_412_pp0_iter6_reg <= tmp_mid2_reg_412_pp0_iter5_reg;
                tmp_mid2_reg_412_pp0_iter7_reg <= tmp_mid2_reg_412_pp0_iter6_reg;
                tmp_mid2_reg_412_pp0_iter8_reg <= tmp_mid2_reg_412_pp0_iter7_reg;
                tmp_mid2_reg_412_pp0_iter9_reg <= tmp_mid2_reg_412_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_181_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                Col_assign_mid2_reg_427 <= Col_assign_mid2_fu_291_p3;
                tmp_mid2_13_reg_416 <= tmp_mid2_13_fu_245_p3;
                tmp_mid2_reg_412 <= tmp_mid2_fu_225_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten1_reg_403_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                cast_in_a_reg_464 <= A_q0;
                cast_in_b_reg_469 <= B_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten1_reg_403 <= exitcond_flatten1_fu_181_p2;
                exitcond_flatten1_reg_403_pp0_iter1_reg <= exitcond_flatten1_reg_403;
                tmp_mid2_13_reg_416_pp0_iter1_reg <= tmp_mid2_13_reg_416;
                tmp_mid2_reg_412_pp0_iter1_reg <= tmp_mid2_reg_412;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten1_reg_403_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mult_reg_474 <= grp_fu_177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_181_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_11_mid2_reg_432 <= tmp_11_mid2_fu_299_p3;
                tmp_i_i_mid2_v_reg_420 <= tmp_i_i_mid2_v_fu_253_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_mid2_reg_412_pp0_iter14_reg = ap_const_lv1_0))) then
                tmp_13_reg_496 <= grp_fu_171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_403 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_22_reg_459 <= tmp_22_fu_392_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten1_fu_181_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten1_fu_181_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1)) or ((exitcond_flatten1_fu_181_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    A_address0 <= tmp_28_cast_fu_373_p1(4 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= tmp_29_cast_fu_387_p1(4 - 1 downto 0);

    B_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_address0 <= C_addr_reg_480_pp0_iter15_reg;

    C_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= tmp_13_reg_496;

    C_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_mid2_reg_412_pp0_iter15_reg, tmp_mid2_13_reg_416_pp0_iter15_reg, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (tmp_mid2_13_reg_416_pp0_iter15_reg = ap_const_lv1_1) and (tmp_mid2_reg_412_pp0_iter15_reg = ap_const_lv1_0))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Col_assign_mid2_fu_291_p3 <= 
        ap_const_lv2_0 when (tmp_18_fu_285_p2(0) = '1') else 
        Col_assign_reg_160;
    Row_assign_mid_fu_205_p3 <= 
        ap_const_lv2_0 when (exitcond_flatten_fu_199_p2(0) = '1') else 
        ap_phi_mux_Row_assign_phi_fu_153_p4;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten1_fu_181_p2)
    begin
        if ((exitcond_flatten1_fu_181_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state19)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_Col_assign_2_phi_fu_131_p4_assign_proc : process(Col_assign_2_reg_127, exitcond_flatten1_reg_403, ap_CS_fsm_pp0_stage0, tmp_i_i_mid2_v_reg_420, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten1_reg_403 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_Col_assign_2_phi_fu_131_p4 <= tmp_i_i_mid2_v_reg_420;
        else 
            ap_phi_mux_Col_assign_2_phi_fu_131_p4 <= Col_assign_2_reg_127;
        end if; 
    end process;


    ap_phi_mux_Row_assign_phi_fu_153_p4_assign_proc : process(Row_assign_reg_149, exitcond_flatten1_reg_403, ap_CS_fsm_pp0_stage0, tmp_11_mid2_reg_432, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten1_reg_403 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_Row_assign_phi_fu_153_p4 <= tmp_11_mid2_reg_432;
        else 
            ap_phi_mux_Row_assign_phi_fu_153_p4 <= Row_assign_reg_149;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_307_p2 <= std_logic_vector(unsigned(Col_assign_mid2_fu_291_p3) + unsigned(ap_const_lv2_1));
    exitcond_flatten1_fu_181_p2 <= "1" when (indvar_flatten1_reg_116 = ap_const_lv5_1B) else "0";
    exitcond_flatten_fu_199_p2 <= "1" when (indvar_flatten_reg_138 = ap_const_lv4_9) else "0";
    exitcond_fu_267_p2 <= "1" when (Col_assign_reg_160 = ap_const_lv2_3) else "0";
    exitcond_mid_fu_273_p2 <= (not_exitcond_flatten_fu_261_p2 and exitcond_fu_267_p2);
    indvar_flatten_next1_fu_187_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_116) + unsigned(ap_const_lv5_1));
    indvar_flatten_next_fu_319_p3 <= 
        ap_const_lv4_1 when (exitcond_flatten_fu_199_p2(0) = '1') else 
        indvar_flatten_op_fu_313_p2;
    indvar_flatten_op_fu_313_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_138) + unsigned(ap_const_lv4_1));
    k_fu_193_p2 <= std_logic_vector(unsigned(ap_phi_mux_Col_assign_2_phi_fu_131_p4) + unsigned(ap_const_lv2_1));
    not_exitcond_flatten_fu_261_p2 <= (exitcond_flatten_fu_199_p2 xor ap_const_lv1_1);
    p_shl1_cast_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_330_p3),5));
    p_shl_cast_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_350_p3),5));
    r_fu_279_p2 <= std_logic_vector(unsigned(Row_assign_mid_fu_205_p3) + unsigned(ap_const_lv2_1));
    sum_mult_address0 <= tmp_30_cast_fu_398_p1(4 - 1 downto 0);

    sum_mult_ce0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_mid2_reg_412_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (tmp_mid2_reg_412_pp0_iter6_reg = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (tmp_mid2_reg_412_pp0_iter6_reg = ap_const_lv1_0)))) then 
            sum_mult_ce0 <= ap_const_logic_1;
        else 
            sum_mult_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_mult_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1))) then 
            sum_mult_ce1 <= ap_const_logic_1;
        else 
            sum_mult_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_mult_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_mid2_reg_412_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (tmp_mid2_reg_412_pp0_iter6_reg = ap_const_lv1_1))) then 
            sum_mult_we0 <= ap_const_logic_1;
        else 
            sum_mult_we0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_mult_we1_assign_proc : process(ap_block_pp0_stage0_11001, tmp_mid2_reg_412_pp0_iter14_reg, tmp_mid2_13_reg_416_pp0_iter14_reg, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (tmp_mid2_13_reg_416_pp0_iter14_reg = ap_const_lv1_0) and (tmp_mid2_reg_412_pp0_iter14_reg = ap_const_lv1_0))) then 
            sum_mult_we1 <= ap_const_logic_1;
        else 
            sum_mult_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp3_fu_219_p2 <= "1" when (ap_phi_mux_Col_assign_2_phi_fu_131_p4 = ap_const_lv2_0) else "0";
    tmp_11_mid2_cast_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_mid2_reg_432),5));
    tmp_11_mid2_fu_299_p3 <= 
        r_fu_279_p2 when (exitcond_mid_fu_273_p2(0) = '1') else 
        Row_assign_mid_fu_205_p3;
    tmp_17_fu_341_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_337_p1) - unsigned(tmp_i_i_mid2_cast_fu_327_p1));
    tmp_18_fu_285_p2 <= (exitcond_mid_fu_273_p2 or exitcond_flatten_fu_199_p2);
    tmp_19_fu_361_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_357_p1) - unsigned(tmp_11_mid2_cast_fu_347_p1));
    tmp_20_fu_367_p2 <= std_logic_vector(unsigned(tmp_i_i_mid2_cast_fu_327_p1) + unsigned(tmp_19_fu_361_p2));
    tmp_21_fu_381_p2 <= std_logic_vector(unsigned(tmp_i_i4_cast_fu_378_p1) + unsigned(tmp_17_fu_341_p2));
    tmp_22_fu_392_p2 <= std_logic_vector(unsigned(tmp_i_i4_cast_fu_378_p1) + unsigned(tmp_19_fu_361_p2));
    tmp_28_cast_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_367_p2),64));
        tmp_29_cast_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_fu_381_p2),64));

    tmp_2_fu_239_p2 <= "1" when (ap_phi_mux_Col_assign_2_phi_fu_131_p4 = ap_const_lv2_2) else "0";
    tmp_30_cast_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_reg_459_pp0_iter6_reg),64));
    tmp_fu_350_p3 <= (tmp_11_mid2_reg_432 & ap_const_lv2_0);
    tmp_i_i4_cast_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Col_assign_mid2_reg_427),5));
    tmp_i_i_mid2_cast_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_mid2_v_reg_420),5));
    tmp_i_i_mid2_v_fu_253_p3 <= 
        k_fu_193_p2 when (exitcond_flatten_fu_199_p2(0) = '1') else 
        ap_phi_mux_Col_assign_2_phi_fu_131_p4;
    tmp_mid1_12_fu_233_p2 <= "1" when (k_fu_193_p2 = ap_const_lv2_2) else "0";
    tmp_mid1_fu_213_p2 <= "1" when (k_fu_193_p2 = ap_const_lv2_0) else "0";
    tmp_mid2_13_fu_245_p3 <= 
        tmp_mid1_12_fu_233_p2 when (exitcond_flatten_fu_199_p2(0) = '1') else 
        tmp_2_fu_239_p2;
    tmp_mid2_fu_225_p3 <= 
        tmp_mid1_fu_213_p2 when (exitcond_flatten_fu_199_p2(0) = '1') else 
        tmp3_fu_219_p2;
    tmp_s_fu_330_p3 <= (tmp_i_i_mid2_v_reg_420 & ap_const_lv2_0);
end behav;
